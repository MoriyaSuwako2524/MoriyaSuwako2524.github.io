<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0. Check List</title>
    <link href="/Check_List/"/>
    <url>/Check_List/</url>
    
    <content type="html"><![CDATA[<p>I’ve been planning to write a series of tutorials for a long time, but procrastination got the better of me—until now.<br>This series aims to serve as both a <strong>personal notebook</strong> and a <strong>beginner’s guide</strong> to computational chemistry, covering theory, software usage, and practical coding.</p><span id="more"></span><h1>Check List</h1><h2 id="TO-DO-LIST">TO DO LIST:</h2>]]></content>
    
    
    <categories>
      
      <category>Computational Chemistry Tutorials</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Quantum Chemistry</tag>
      
      <tag>Tutorial</tag>
      
      <tag>Computational Chemistry</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Single Point Calculation</title>
    <link href="/Single%20Point/"/>
    <url>/Single%20Point/</url>
    
    <content type="html"><![CDATA[<h1>Single-Point (SP) Calculation</h1><p>A <strong>single-point (SP)</strong> calculation evaluates properties (most commonly the <strong>electronic energy</strong>) of a system at a <strong>fixed geometry</strong>. It’s the simplest job type in computational chemistry and a building block for scans, optimizations, and higher-level methods.</p><h3 id="Where-the-geometry-comes-from">Where the geometry comes from</h3><ul><li>Manually built in a GUI (e.g., IQmol)</li><li>From a prior <strong>geometry optimization</strong></li><li>From <strong>experiment</strong> (X-ray, neutron, cryo-EM models)</li><li>From <strong>supplementary information</strong> (SI) in papers</li><li><strong>Automatically generated</strong> by other programs or scripts (ASE, RDKit, Amber, etc.)</li></ul><h3 id="What-Q-Chem-does-in-a-default-SP-run">What Q-Chem does in a default SP run</h3><ol><li>Print license banner and echo the input.</li><li>Initialize the molecular structure and basis set.</li><li>Build an <strong>initial guess</strong> for the wavefunction and evaluate its energy.</li><li>Run <strong>self-consistent field (SCF)</strong> iterations until converged.</li><li>If requested, perform <strong>additional models</strong> (DFT options, TDDFT roots, post-HF correlation, etc.).</li><li>Analyze the wavefunction: orbital energies (HOMO–LUMO), charges, multipole moments, and other requested properties.</li><li>Write a summary and timings, then exit.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Chemistry Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quantum Chemistry Theory Basic</title>
    <link href="/Quantum%20Chemistry%20Theory%20Basic/"/>
    <url>/Quantum%20Chemistry%20Theory%20Basic/</url>
    
    <content type="html"><![CDATA[<h1>Quantum Chemistry Theory Basic</h1><blockquote><p><strong>Note:</strong> This part is for a quick introduction to Quantum Chemistry. For a more comprehensive study, I recommend <em>Modern Quantum Chemistry</em> by Szabo.</p></blockquote><p>Quantum chemistry calculations face the central challenge of solving the Schrödinger equation for many-body systems. Because the Schrödinger equation is too complex to be solved exactly, in practical numerical calculations various approximations are always introduced to reduce computational complexity and cost. Common approximations include:</p><ul><li>Born–Oppenheimer approximation</li><li>Finite basis set approximation</li><li>Single-electron approximation, electron correlation approximations</li><li>Relativistic approximations</li><li>Approximations in numerical accuracy of computation</li></ul><p>In most cases, the accuracy of quantum chemistry calculations depends critically on two aspects: the theoretical method and the basis set.</p><h2 id="I-Born–Oppenheimer-BO-Approximation">I. Born–Oppenheimer (BO) Approximation</h2><p>To rigorously solve the Schrödinger equation of a molecular system, both electrons and nuclei must be treated quantum mechanically, which makes the problem very complex:</p><p>$$<br>\hat{H}<em>{\text{tot}} , \Psi</em>{\text{tot}}(\mathbf{R}; \mathbf{r})<br>= E_{\text{tot}} , \Psi_{\text{tot}}(\mathbf{R}; \mathbf{r})<br>$$</p><p>Since nuclear masses are much larger than electron masses, quantum effects of nuclei are much smaller than those of electrons. The BO approximation is one of the most important approximations in quantum chemistry. It separates nuclear and electronic motions, thereby reducing the complexity of solving the molecular Schrödinger equation:</p><p>$$<br>\Psi_{\text{tot}}(\mathbf{R}; \mathbf{r})<br>= \Psi_{\text{nuc}}(\mathbf{R}) , \Psi_{\text{ele}}^{(\mathbf{R})}(\mathbf{r})<br>$$</p><hr><h3 id="1-1-Electronic-Schrodinger-Equation">1.1 Electronic Schrödinger Equation</h3><p>Under the BO approximation, when solving the electronic wavefunction, the nuclear positions are regarded as fixed parameters. Thus, the BO approximation is also referred to as the fixed-nuclei approximation.</p><p>For each set of nuclear coordinates $\mathbf{R}$, the corresponding electronic energy $E_{\text{ele}}(\mathbf{R})$ can be obtained by solving the electronic Schrödinger equation. This energy is called the potential energy or potential energy surface (PES) under the BO approximation:</p><p>$$<br>\hat{H}<em>{\text{ele}}^{(\mathbf{R})} \Psi</em>{\text{ele}}^{(\mathbf{R})}(\mathbf{r})<br>= E_{\text{ele}}^{(\mathbf{R})} \Psi_{\text{ele}}^{(\mathbf{R})}(\mathbf{r})<br>$$</p><p>To describe nuclear motion, one must further solve the nuclear Schrödinger equation, which includes the nuclear kinetic energy operator and the interaction potential:</p><p>$$<br>\left[ \hat{T}<em>{\text{nuc}} + E</em>{\text{pot}}(\mathbf{R}) \right]<br>\Psi_{\text{nuc}}(\mathbf{R})<br>= E_{\text{tot}} \Psi_{\text{nuc}}(\mathbf{R})<br>$$</p><hr><h3 id="1-2-Beyond-the-BO-Approximation">1.2 Beyond the BO Approximation</h3><p>For directly solving the nuclear + electronic system, using the BO approximation to obtain the nuclear wavefunction and $E_{\text{tot}}$, the following corrections may be introduced:</p><ol><li><strong>Non-adiabatic correction</strong>: This introduces the non-adiabatic coupling matrix elements (NACME), which describe the coupling between different electronic states and nuclear motion.</li><li><strong>Diagonal correction</strong>: The diagonal part corresponding to NACME, used to correct the coupling between a single electronic state and nuclear motion; this contribution is usually small.</li><li><strong>Mass polarization correction</strong>: Arising from the coupling between the internal motion of the electrons and the center-of-mass motion of the nuclei.</li></ol><p><em>For details, see</em> <em>Introduction to Computational Chemistry</em> (3rd edition), Section 3.1.</p><hr><h3 id="1-3-Diagonal-Born–Oppenheimer-Correction-DBOC">1.3 Diagonal Born–Oppenheimer Correction (DBOC)</h3><p>When no strong intersection of two potential energy surfaces occurs, the BO approximation is often very reasonable. Errors in the electronic part of the calculation are mainly due to the neglect of nuclear motion. If further corrections are required, one can add the <strong>Diagonal Born–Oppenheimer Correction (DBOC)</strong> to the electronic energy:</p><p>$$<br>\Delta E_{\text{DBOC}} =<br>\sum_A^{\text{atoms}}</p><ul><li>\frac{1}{2M_A}<br>\left\langle \Psi_{\text{ele}} \middle| \nabla_A^2 \middle| \Psi_{\text{ele}} \right\rangle<br>$$</li></ul><p>In molecular dynamics simulations involving nuclear motion, potential energy surfaces alone are not sufficient; one must also consider the coupling between electronic and nuclear motion. The <strong>non-adiabatic coupling matrix elements (NACME)</strong> then become particularly important. In such cases, although the BO approximation provides a useful starting point, the electronic Schrödinger equation must often be solved repeatedly with explicit inclusion of NACME terms.</p><h2 id="II-Electron-Correlation">II. Electron Correlation</h2><p>In practical quantum chemical calculations, the molecular Hamiltonian is written as:</p><p>$$<br>\hat{H}_{\text{ele}}^{(\mathbf{R})}<br>= \sum_i \left[ -\frac{1}{2} \nabla_i^2 - \sum_A \frac{Z_A}{|\mathbf{r}_i - \mathbf{R}_A|} \right]</p><ul><li>\sum_{i&gt;j} \frac{1}{r_{ij}}</li><li>\sum_{A&gt;B} \frac{Z_A Z_B}{|\mathbf{R}_A - \mathbf{R}_B|}<br>$$</li></ul><p>where the terms correspond to <strong>electron kinetic energy</strong>, <strong>electron–nucleus attraction</strong>, <strong>electron–electron repulsion</strong>, and <strong>nucleus–nucleus repulsion</strong>. The first bracketed part is the <strong>one-electron part</strong>.</p><hr><h3 id="2-1-Electron–Electron-Interaction-in-Terms-of-Density">2.1 Electron–Electron Interaction in Terms of Density</h3><p>The electron–electron interaction can also be expressed in terms of the electron density, which provides a more intuitive physical picture:</p><p>$$<br>E_{ee} = \left\langle \Psi \middle| \sum_{i&gt;j} \frac{1}{r_{ij}} \middle| \Psi \right\rangle<br>= \iint \frac{\rho(\mathbf{r}_1, \mathbf{r}<em>2)}{r</em>{12}} , d\mathbf{r}_1 d\mathbf{r}_2<br>$$</p><p>The two-particle density can be decomposed as:</p><p>$$<br>\rho(\mathbf{r}_1, \mathbf{r}_2) =<br>[\rho^{\alpha\alpha}(\mathbf{r}_1, \mathbf{r}_2) + \rho^{\beta\beta}(\mathbf{r}_1, \mathbf{r}_2)]</p><ul><li>[\rho^{\alpha\beta}(\mathbf{r}_1, \mathbf{r}_2) + \rho^{\beta\alpha}(\mathbf{r}_1, \mathbf{r}_2)]<br>= \rho^{\uparrow\uparrow}(\mathbf{r}_1, \mathbf{r}_2) + \rho^{\uparrow\downarrow}(\mathbf{r}_1, \mathbf{r}_2)<br>$$</li></ul><ul><li><strong>Same-spin pair density</strong><br>$$<br>\rho^{\uparrow\uparrow}(\mathbf{r}_1, \mathbf{r}_2)<br>= \Gamma^{\uparrow\uparrow}(\mathbf{r}_1, \mathbf{r}_2)<br>= \rho^{\uparrow}(\mathbf{r}_1) \rho^{\uparrow}(\mathbf{r}_2) + \Gamma_X^{\uparrow\uparrow}(\mathbf{r}_1, \mathbf{r}_2)<br>$$</li><li><strong>Opposite-spin pair density</strong><br>$$<br>\rho^{\uparrow\downarrow}(\mathbf{r}_1, \mathbf{r}_2)<br>= \Gamma^{\uparrow\downarrow}(\mathbf{r}_1, \mathbf{r}_2)<br>= \rho^{\uparrow}(\mathbf{r}_1) \rho^{\downarrow}(\mathbf{r}_2)<br>$$</li></ul><hr><h3 id="2-2-Exchange-and-Coulomb-Correlation">2.2 Exchange and Coulomb Correlation</h3><ul><li><p><strong>Exchange correlation ($X$)</strong>: Arises from the Pauli exclusion principle (antisymmetry of the electronic wavefunction). This reduces the probability of finding two same-spin electrons close to each other. The corresponding energy lowering is the <strong>exchange energy $E_X$</strong>.</p></li><li><p><strong>Coulomb correlation ($C$)</strong>: Due to Coulomb repulsion, electrons tend to avoid each other even beyond exchange effects, lowering the probability of electron–electron co-location. This further reduces the system energy, corresponding to the <strong>correlation energy $E_C$</strong>.</p></li></ul><p>Thus, electron correlation effects beyond exchange are essential to capture long-range Coulomb avoidance. Approximations neglecting this (e.g., Hartree–Fock) miss correlation energy, which must be included for quantitative accuracy.</p><hr><h3 id="Example-H-2">Example: $H_2$</h3><p>Consider the hydrogen molecule:</p><ul><li><strong>Correlation hole</strong>: If one electron is known to be at a certain position, the probability of finding another electron nearby is reduced due to exchange and correlation effects.</li><li><strong>Fermi hole</strong>: Reflects the Pauli principle; the minimum value is 0, showing that the probability of finding two same-spin electrons at the same position is zero.</li><li><strong>Coulomb hole</strong>: Arises from Coulomb repulsion; the distribution shifts slightly to avoid close encounters even for opposite-spin electrons.</li></ul><p>Graphically, the <strong>total hole</strong> can be seen as a combination of the <strong>Fermi hole</strong> and <strong>Coulomb hole</strong>, shifting electron density to reduce repulsion.</p><h2 id="III-Classification-of-Common-Theoretical-Methods">III. Classification of Common Theoretical Methods</h2><ul><li><strong>Semi-empirical methods</strong> (e.g., Semi-empirical, DFTB, GFN-xTB)</li><li><strong>Density functional theory (DFT)</strong></li><li><strong>Hartree–Fock (HF)</strong></li><li><strong>Perturbation theory</strong></li><li><strong>Coupled cluster (CC)</strong></li><li><strong>Configuration interaction (CI)</strong></li><li><strong>Multiconfigurational self-consistent field (MCSCF)</strong></li><li><strong>Multireference methods</strong> (e.g., MRCI, CASPT2)</li><li><strong>Molecular mechanics (MM, non-quantum chemistry)</strong></li></ul><p>Among them, <strong>ab initio</strong> methods are those derived directly from first principles without empirical parameters. In practice, computational chemistry often balances accuracy and computational cost.</p><p>DFT is currently the most widely used method because it achieves a balance between efficiency and accuracy. Although not as rigorous as wavefunction-based <em>post-HF</em> methods, DFT is still a mainstream tool.</p><h3 id=""></h3>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Chemistry Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Q-Chem Basic</title>
    <link href="/QChem_Basic/"/>
    <url>/QChem_Basic/</url>
    
    <content type="html"><![CDATA[<h1>Basic of Q-chem</h1><p><strong>Q-Chem</strong> is a general-purpose electronic-structure package maintained and distributed by Q-Chem, Inc., headquartered in Pleasanton, California (USA). Founded in 1993, it is developed by a broad community of contributors. Within the CCATS group, Q-Chem serves as the primary platform for method development and production calculations.</p><h2 id="1-Q-Chem-overview">1.<strong>Q-Chem overview</strong></h2><p>Q-Chem is a general-purpose electronic-structure package offering broad coverage from HF/DFT to advanced correlated and multireference methods. As of <strong>August 23, 2025</strong>, the latest release is <strong>Q-Chem 6.3</strong>.</p><p><strong>Core capabilities (selected)</strong></p><ol><li><strong>Ground-state SCF (HF/ROHF/UHF):</strong> analytic gradients/Hessians, robust optimizers, and property analysis.</li><li><strong>Density Functional Theory:</strong> semilocal → double-hybrid functionals; energies, geometry optimizations, and vibrational analyses; TDDFT including spin-flip variants for challenging excitations.</li><li><strong>Post-HF correlation:</strong> MP2 family (incl. OO/RI/dual-basis, MP3), coupled-cluster (CCSD, CCSD(T)) and a wide EOM-CC suite (EE/SF/IP/EA), plus ADC methods.</li><li><strong>Strong correlation &amp; active-space options:</strong> CASSCF/CAS-CI, RAS-CI/RAS-SF, CCVB/PP, and spin-flip DFT.</li><li><strong>Excited states (broad toolbox):</strong> CIS, CIS(D), TDDFT/SF-TDDFT, ΔSCF via MOM/SGM, NOCI/NOCIS, EOM-CC, ADC; support for core-level excitations (CVS).</li><li><strong>Embedding &amp; extended systems:</strong> stand-alone <strong>QM/MM</strong>, CHARMM interface, <strong>QM/EFP</strong>, and modern dielectric/embedding models.</li><li><strong>PES exploration &amp; optimization:</strong> constrained and unconstrained optimizations (minima/TS), IRC paths, and relaxed scans.</li></ol><p><strong>Performance &amp; parallelism</strong><br>Q-Chem supports OpenMP threading, MPI for distributed-memory runs. Usually one should run with $2^n$ numbers of cores. I ran some benchmark of the parallel jobs:</p><p><img src="D:%5Ccalculate%5Cgithub%5CQchemTutorials%5Cnotebooks%5C03-qchem%5Cpngs%5Cparallel1.png" alt="parallel1"></p><p>Figure 1. Parallel benchmarking of Q-Chem on the test molecule. Three tasks(single-point (SP), force, and vibrational frequency) were run with 2, 4, 8, 16, and 32 CPU cores on PETE. Speedup is computed from wall time relative to the 2-core run. According to the Figure, adding more cores won’t give proportional speeds.</p><h2 id="2-Install-Compile-Q-chem">2. Install &amp; Compile Q-chem</h2><p>Requirements:</p><ul><li>An access to a Linux Computer</li><li>Q-chem package</li><li>Basic knowledge of the Linux shell &amp; Slurm</li></ul><p>Optional:</p><ul><li>Pete supercomputer (used as an example in this tutorial)</li><li>Q-chem developer access</li></ul><p>If you plan to develop new features in Q-Chem (e.g., new functions, special requirements), or if you simply want your own installation, you’ll need to download and compile Q-Chem in your home environment.</p><h3 id="2-1-Download-Q-Chem">2.1: Download Q-Chem</h3><p>Select a suitable directory for Q-Chem that has enough space (at least 10 GB) and will not be automatically cleaned up by system administrators.</p><p>On the Pete supercomputer, a recommended location is<code>/scratch/$user/software/</code> .</p><p>Replace <code>$user</code> with your own username. If the <code>software</code> directory does not exist, create it with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /scratch/<span class="hljs-variable">$user</span><br><span class="hljs-built_in">mkdir</span> software<br><span class="hljs-built_in">cd</span> software<br></code></pre></td></tr></table></figure><p>You can use <code>pwd</code> to verify that you are inside <code>/scratch/$user/software</code>.</p><p>For Q-Chem developers, you can check out the latest source code via <strong>SVN</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn --username=<span class="hljs-variable">$qchem</span>-developer-id checkout https://jubilee.q-chem.com/svnroot/qchem/trunk <span class="hljs-variable">$qchem</span>-directory-name<br></code></pre></td></tr></table></figure><p>Replace <code>$qchem-developer-id</code> with your developer ID and <code>$qchem-directory-name</code> with a custom name for your Q-Chem installation.<br>If you just want a standard installation, you can simply use <code>qchem</code> as the folder name:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">svn --username=<span class="hljs-variable">$qchem</span>-developer-id checkout https://jubilee.q-chem.com/svnroot/qchem/trunk qchem<br></code></pre></td></tr></table></figure><p>The download may take some time. After it finishes, you should see a new folder with the name you specified. Change into this directory, and prepare to configure the build.</p><h3 id="2-2-Compile-Q-Chem">2.2 Compile Q-Chem</h3><p>On the Pete supercomputer, you can write the following script (<code>compiler.sh</code>) to set up the environment and configure Q-Chem:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#SBATCH --partition=batch</span><br><span class="hljs-comment">#SBATCH --ntasks=16</span><br><span class="hljs-comment">#SBATCH --tasks-per-node=16</span><br><span class="hljs-comment">#SBATCH --output=./logs/%J_stdout.txt</span><br><span class="hljs-comment">#SBATCH --error=./logs/%J_stderr.txt</span><br><span class="hljs-comment">#SBATCH --time=1-00:00:00</span><br><span class="hljs-comment">#SBATCH --job-name=comp</span><br><br>module purge<br>module load cmake3/3.24.3<br>module load impi/2021.2.0<br>module load intel/2021.2.0<br><br><span class="hljs-built_in">export</span> QC=/scratch/<span class="hljs-variable">$USER</span>/software/qchem<br><span class="hljs-built_in">source</span> <span class="hljs-variable">$QC</span>/bin/qchem.setup.sh<br><span class="hljs-built_in">export</span> QCSCRATCH=/scratch/<span class="hljs-variable">$USER</span><br><br>./configure intel release<br><br></code></pre></td></tr></table></figure><p>Source the script to start configuration:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ./compiler.sh<br></code></pre></td></tr></table></figure><p>The terminal should display progress messages. If everything is set up correctly, you will see:</p><blockquote><p>Configureing done</p><p>Generating done</p><p>Build files have been written to: /scratch/$USER/software/qchem/build</p></blockquote><p>This indicates that the <strong>build directory</strong> has been created successfully.</p><p>If you encounter errors, check the output and carefully read the error messages. In most cases, problems can be resolved by installing the required module, searching for the error message on Google or by asking ChatGPT for help.</p><p>There’re some collection for [Known Issues](./Q-Chem Compile <a href="http://Issues.md">Issues.md</a>).</p><p>Copy the <a href="http://compiler.sh">compiler.sh</a> file into build directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ./compiler.sh ./build/compiler.sh<br><span class="hljs-built_in">cd</span> build<br><span class="hljs-built_in">mkdir</span> logs<br></code></pre></td></tr></table></figure><p><strong>Edit the copied script</strong> by adding one more line at the end:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -j 16 qcprog.exe &gt; mall.log<br></code></pre></td></tr></table></figure><p>This will build Q-Chem with 16 parallel threads and save the compilation output into <code>mall.log</code>.</p><p>Use the following command to submit the compile command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sbatch compiler.sh<br></code></pre></td></tr></table></figure><p>The first compilation can usually take more than <strong>4 hours</strong>.</p><p>To check whether the job is still running or has finished (successfully or with errors), use:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">squeue</span> -u <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><p>You can also check the build logs in:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/scratch/</span><span class="hljs-variable">$USER</span><span class="hljs-regexp">/software/</span>qchem<span class="hljs-regexp">/build/</span>logs<br></code></pre></td></tr></table></figure><p>When compilation finishes successfully, a file named <code>qcprog.exe</code> will appear in either the <code>build</code> directory or the <code>exe</code> directory.</p><p>If the executable is located in the <code>build</code> directory, copy it to your designated <code>exe</code> folder, for example:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp .<span class="hljs-regexp">/build/</span>qcprog.exe <span class="hljs-regexp">/scratch/</span><span class="hljs-variable">$USER</span><span class="hljs-regexp">/software/</span>qchem<span class="hljs-regexp">/exe/</span><br></code></pre></td></tr></table></figure><p>At this point, you have successfully compiled Q-Chem.</p><h2 id="3-File-structure-of-Q-chem-input-file">3. File structure of Q-chem input file</h2><p>Q-Chem input files are divided into several <strong>modules</strong>, each enclosed by <code>$…</code> and <code>$end</code>.<br>Below is an example input file, followed by explanations of the most commonly used sections:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dns">$molecule<br><span class="hljs-number">0</span> <span class="hljs-number">1</span><br>O         -<span class="hljs-number">3.13270</span>       -<span class="hljs-number">0.56690</span>        <span class="hljs-number">1.47260</span><br>H         -<span class="hljs-number">3.45320</span>        <span class="hljs-number">0.33800</span>        <span class="hljs-number">1.47260</span><br>O         -<span class="hljs-number">1.81270</span>       -<span class="hljs-number">0.56690</span>        <span class="hljs-number">1.47260</span><br>H         -<span class="hljs-number">1.49230</span>       -<span class="hljs-number">1.21460</span>        <span class="hljs-number">2.10460</span><br>$end<br><br>$rem<br>BASIS  =  <span class="hljs-number">6</span>-<span class="hljs-number">31</span>+G*<br>JOB_TYPE  = opt<br>METHOD = HF<br>SOLVENT_METHOD = PCM<br>$end<br><br>$solvent<br>Dielectric <span class="hljs-number">78</span>.<span class="hljs-number">39</span><br>$end<br><br></code></pre></td></tr></table></figure><h3 id="3-1-molecule">3.1 $molecule</h3><p>The <strong>molecule block</strong> specifies the atomic structure, charge, and spin multiplicity of the system:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">$molecule<br><span class="hljs-number">0</span> <span class="hljs-number">1</span><br>O         -<span class="hljs-number">3.13270</span>       -<span class="hljs-number">0.56690</span>        <span class="hljs-number">1.47260</span><br>H         -<span class="hljs-number">3.45320</span>        <span class="hljs-number">0.33800</span>        <span class="hljs-number">1.47260</span><br>O         -<span class="hljs-number">1.81270</span>       -<span class="hljs-number">0.56690</span>        <span class="hljs-number">1.47260</span><br>H         -<span class="hljs-number">1.49230</span>       -<span class="hljs-number">1.21460</span>        <span class="hljs-number">2.10460</span><br>$end<br><br></code></pre></td></tr></table></figure><p>The first line after <code>$molecule</code> contains:</p><ul><li><strong>Charge</strong> (here <code>0</code>, meaning neutral molecule)</li><li><strong>Multiplicity</strong> (here <code>1</code>, meaning a singlet state, in which all electrons are paired)</li></ul><p>The following lines list each atom:</p><ul><li><strong>Element symbol</strong> (e.g., O, H)</li><li><strong>Cartesian coordinates</strong> in Ångström (x, y, z).</li></ul><p>This block defines both the electronic state and the geometry of your system.</p><h3 id="3-2-rem">3.2 <code>$rem</code></h3><p>The <strong>$rem block</strong> (short for <em>run-time environment module</em>) controls most of the calculation settings in Q-Chem.</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$rem</span></span><br>BASIS          = <span class="hljs-number">6</span><span class="hljs-number">-31</span>+G*<br>JOB_TYPE       = opt<br>METHOD         = HF<br>SOLVENT_METHOD = PCM<br><span class="hljs-meta"><span class="hljs-keyword">$end</span></span><br></code></pre></td></tr></table></figure><p>Here’s what each line means:</p><ul><li><strong><code>BASIS = 6-31+G\*</code></strong><ul><li>Specifies the basis set.</li><li><code>6-31+G*</code> is a split-valence basis set with diffuse (<code>+</code>) and polarization (<code>*</code>) functions.</li><li>You can change this to other basis sets (e.g., <code>cc-pVDZ</code>, <code>def2-TZVP</code>).</li></ul></li><li><strong><code>JOB_TYPE = opt</code></strong><ul><li>Defines the type of calculation.</li><li>Common options:<ul><li><code>sp</code> → single-point energy</li><li><code>opt</code> → geometry optimization</li><li><code>freq</code> → vibrational frequency analysis</li><li><code>force</code> → analytic gradient</li></ul></li></ul></li><li><strong><code>METHOD = HF</code></strong><ul><li>Specifies the electronic structure method.</li><li>Examples:<ul><li><code>HF</code> (Hartree–Fock)</li><li><code>DFT functionals</code> (e.g., <code>B3LYP</code>, <code>PBE0</code>)</li><li><code>MP2</code>, <code>CCSD</code>, <code>ADC</code>, etc.</li></ul></li></ul></li><li><strong><code>SOLVENT_METHOD = PCM</code></strong><ul><li>Tells Q-Chem to include solvent effects using the <strong>Polarizable Continuum Model (PCM)</strong>.</li><li>Requires an additional <code>$solvent</code> block. It specific which solvent you are using by their dielectric value.</li></ul></li></ul><p>The <code>$rem</code> section is the heart of the input file, it controls what calculation is being done and how. A significant thing is that, whenever you copy an input file from others, and you don’t know exactly each line means.</p><h2 id="4-Run-a-Q-Chem-job">4. Run a Q-Chem job</h2><p>Once you have Q-Chem installed, run a few small jobs to test it. (You can also borrow a working Q-Chem install on a shared server to practice job submission.)</p><p>We usually keep each project in its own folder—don’t mix everything together (unless you’re a T-800 ).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /scratch/<span class="hljs-variable">$USER</span><br><span class="hljs-built_in">mkdir</span> -p qchem_calculation/tutorial_practices<br><span class="hljs-built_in">cd</span> qchem_calculation/tutorial_practices<br></code></pre></td></tr></table></figure><p>Tip: press <code>Tab</code> for filename autocompletion.</p><p>You can either copy the example input file in section 3, or create your own one. I give the example input name as <code>H2O2.inp</code>. Just use the following command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi H2O2.inp<br></code></pre></td></tr></table></figure><p>In <code>vi</code>: press <code>a</code> to enter insert mode, paste example input from Section 3, press <code>Esc</code>, then type <code>:wq</code> to save and quit.</p><p>usually we use bash to submit jobs. Still create a file named <code>sub.sh</code>. You can just use the following bash first:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#SBATCH -J qchem_test                 # Job name</span><br><span class="hljs-comment">#SBATCH -p express                    # Partition/queue</span><br><span class="hljs-comment">#SBATCH --time=01:00:00               # Wall time limit</span><br><span class="hljs-comment">#SBATCH --nodes=1</span><br><span class="hljs-comment">#SBATCH --ntasks=1                    # 1 MPI task (Q-Chem will use threads)</span><br><span class="hljs-comment">#SBATCH --cpus-per-task=16            # Threads for OpenMP (-nt)</span><br><span class="hljs-comment">#SBATCH -o ./logs/OUTPUT_%J.log</span><br><span class="hljs-comment">#SBATCH -e ./logs/ERRORS_%J.log</span><br><br><br><span class="hljs-comment"># --- Q-Chem environment ---</span><br><span class="hljs-built_in">export</span> QC=/scratch/<span class="hljs-variable">$USER</span>/software/qchem          <span class="hljs-comment"># Q-Chem install root</span><br><span class="hljs-comment"># export QCAUX=/path/to/qcaux                    # Optional: EFP bases, etc.</span><br><span class="hljs-built_in">source</span> <span class="hljs-string">&quot;<span class="hljs-variable">$QC</span>/bin/qchem.setup.sh&quot;</span>                  <span class="hljs-comment"># Or qchem.setup / qchem_setup</span><br><span class="hljs-comment"># Use node-local scratch if available; else fall back to a per-user scratch</span><br><span class="hljs-built_in">export</span> QCSCRATCH=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SLURM_TMPDIR:-/scratch/$USER/qcscratch/$SLURM_JOB_ID&#125;</span>&quot;</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$QCSCRATCH</span>&quot;</span><br><br><span class="hljs-comment"># Compiler/runtime modules (adjust to your cluster)</span><br>module purge<br>module load intel/2021.2.0<br><br><span class="hljs-comment"># Make OpenMP threads match Slurm allocation</span><br><span class="hljs-built_in">export</span> OMP_NUM_THREADS=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SLURM_CPUS_PER_TASK&#125;</span>&quot;</span><br><br><br>infile=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-comment"># Output name: replace .inp with .out (or just append .out if no .inp)</span><br>outfile=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;infile%.inp&#125;</span>.out&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Running Q-Chem on <span class="hljs-variable">$infile</span> with <span class="hljs-variable">$&#123;OMP_NUM_THREADS&#125;</span> threads…&quot;</span><br>qchem -nt <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;OMP_NUM_THREADS&#125;</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$infile</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$outfile</span>&quot;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Done. Output: <span class="hljs-variable">$outfile</span>&quot;</span><br><br></code></pre></td></tr></table></figure><p>Why these settings?</p><ul><li><code>--ntasks=1</code> + <code>--cpus-per-task=16</code> is the correct layout for <strong>threaded</strong> (OpenMP) Q-Chem runs.</li><li><code>qchem -nt N</code> tells Q-Chem to use <strong>N OpenMP threads</strong>.</li></ul><p>Submit the job (from the folder containing <code>H2O2.inp</code> and <code>sub.sh</code>):</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sbatch </span><span class="hljs-keyword">sub.sh </span>H2O2.inp<br></code></pre></td></tr></table></figure><p>Useful Slurm command:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">squeue -u $<span class="hljs-keyword">USER</span>           <span class="hljs-title"># Check</span> job status<br></code></pre></td></tr></table></figure><h2 id="5-View-Q-Chem-Results-with-IQmol">5. View Q-Chem Results with IQmol</h2>]]></content>
    
    
    <categories>
      
      <category>Computational Chemistry Tutorials</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Quantum Chemistry</tag>
      
      <tag>Tutorial</tag>
      
      <tag>Preface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMD</title>
    <link href="/VMD/"/>
    <url>/VMD/</url>
    
    <content type="html"><![CDATA[<h1>VMD</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Chemistry Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Potential Energy Surface I. Concept</title>
    <link href="/Potential%20Energy%20Surface%20I.%20Concept/"/>
    <url>/Potential%20Energy%20Surface%20I.%20Concept/</url>
    
    <content type="html"><![CDATA[<h1>Potential Energy Surface I. Concept</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Chemistry Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Q-Chem Compile</title>
    <link href="/Q-Chem%20Compile%20Issues/"/>
    <url>/Q-Chem%20Compile%20Issues/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Chemistry Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHY 162a 2</title>
    <link href="/Phy%20162a%202/"/>
    <url>/Phy%20162a%202/</url>
    
    <content type="html"><![CDATA[<p>1.Consider a Lagrangian system consisting of D coordinates $q^{I=1,…,D}$ and $m$ constraints $f_{α=1,…m}(q^I)$ = 0. Let $s^{i=1,…,D−m}$ be coordinates on the constrained submanifold define by $f_α(q) = 0$, so that $f_α(q^I(s^i, t))$ = 0 for all $s^i$. We showed in class that for any infinitesimal motion $δs^i$, then<br>$$<br>(\dot p_I-\mathcal F_I)\frac{\partial q^I}{\partial s^i}\delta s^i = 0<br>$$<br>Show that the equations of motion above follow from the Euler-Lagrange equations for<br>$$<br>\tilde L(s^i,\dot s^i) = L(q^I(s^i),\dot s^i \frac{\partial q^I}{\partial s^i}(s^i))<br>$$</p><p>Prove:<br>$$<br>\dot q^I(s^i) =<br>$$</p><p>$$<br>\frac{d}{dt}\frac{\partial \tilde L(s^i,\dot s^i)}{\partial \dot s^i}-\frac{\partial \tilde L(s^i,\dot s^i)}{\partial \dot s^i} &amp;= \frac{d}{dt}\frac{ L(q^I(s^i),\dot s^i \frac{\partial q^I}{\partial s^i}(s^i)}{\partial \dot q^I}\frac{\partial \dot q^I}{\partial \dot s^i}-\frac{\partial \tilde  L(q^I(s^i),\dot s^i \frac{\partial q^I}{\partial s^i}(s^i)}{\partial \dot q^I}\frac{\partial q^I}{\partial s^i}<br>\<br>&amp;=<br>$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>PHY 162a Problem Sets</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Preface</title>
    <link href="/Preface/"/>
    <url>/Preface/</url>
    
    <content type="html"><![CDATA[<h1>Preface</h1><p>I’ve been planning to write a series of tutorials for a long time,<br>but procrastination got the better of me—until now.<br>This series aims to serve as both a <strong>personal notebook</strong> and a <strong>beginner’s guide</strong><br>to computational chemistry, covering theory, software usage, and practical coding.</p><h2 id="TO-DO-LIST">TO DO LIST:</h2><ol start="0"><li><p><a href="/Check_List/">Check List</a></p></li><li><p>Computational Chemistry Softwares</p><ol><li><a href="/QChem_Basic/">Q-Chem Basic</a></li><li>IQmol</li><li>Multiwfn</li><li>VMD</li><li>Pymol</li><li>ORCA</li></ol></li><li><p>Computational Chemistry Jobs</p><ol><li>[Quantum Chemistry Theory Basic (quick review version)](/Quantum Chemistry Theory Basic/)</li><li>[Basis Set](/Basis Set/)</li><li>Single Point</li><li>Potential Energy Surface I. Concept</li><li>Geometry Optimization</li><li>Transition State</li><li>IRC and Chemical Reactions</li><li>Potential Energy Surface II. Scan</li><li>Vibration Analysis, Infrared Spectra, Raman Spectra, VCD and ROA spectra</li><li>Thermodynamics</li><li>Weak Interactions</li><li>Solvent Models</li><li>Excited States and Electronic spectra I. Theories</li><li>Excited States and Electronic spectra II. Calculations</li><li>Miscellaneous</li></ol></li><li><p>Quantum Chemistry Basic</p><ol><li>Quantum Mechanic</li><li>Hartree-Fock</li><li>CI methods</li><li>DFT</li></ol></li><li><p>Object-Oriented Programming(One should already have python code experience)</p><ol><li><p>Types of Coding</p></li><li><p>Concept of Objects</p></li><li><p>Objects and Classes in Python</p></li><li><p>Example: Jobs Management for Q-Chem by Python</p></li></ol></li><li><p>Quantum Chemistry Code Implement</p><ol><li>Hartree-Fock</li><li>DFT?</li><li>FCI?</li><li>First Order Gradient</li><li>Hessian</li></ol></li><li><p>Other things</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Computational Chemistry Tutorials</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Quantum Chemistry</tag>
      
      <tag>Tutorial</tag>
      
      <tag>Preface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basis Sets</title>
    <link href="/Basis%20Set/"/>
    <url>/Basis%20Set/</url>
    
    <content type="html"><![CDATA[<h1>Basis Sets</h1><h2 id="I-Basis-Function">I. Basis Function</h2><p>To solve the HF and KS-DFT equations, molecular orbitals are expanded as linear combinations of basis functions:</p><p>$$<br>\varphi_i(\mathbf{r}) = C_{1,i}\chi_1(\mathbf{r}) + C_{2,i}\chi_2(\mathbf{r}) + C_{3,i}\chi_3(\mathbf{r}) + \cdots + C_{N,i}\chi_N(\mathbf{r})<br>$$</p><ul><li>$\varphi_i(\mathbf{r})$: the <em>molecular orbital</em> $i$</li><li>$\chi_j(\mathbf{r})$: the <em>basis function</em> $j$ (often constructed from atomic orbitals)</li><li>$C_{j,i}$: the <em>expansion coefficient</em>, obtained from solving the electronic structure equations</li><li>$N$: the total number of basis functions used</li></ul><h3 id="1-1-Concept-of-Basis-Functions">1.1 Concept of Basis Functions</h3><ul><li>The concept of basis functions is <strong>mathematical</strong>.</li><li>More basis functions → higher accuracy.</li><li>However, the essential question is: <strong>how to choose a reasonable set of basis functions</strong>.</li></ul><p>When the basis set is sufficiently large, the calculation approaches the <strong>Complete Basis Set (CBS) limit</strong>, where the molecular orbitals are represented exactly.</p><p>In practice, basis sets are always finite, so there is always a <strong>basis set error</strong> in addition to the inherent method error. The number of basis functions sets the number of molecular orbitals. However, not all orbitals are chemically relevant. Typically only the occupied orbitals and low-lying virtual orbitals have real chemical significance. If basis functions are chosen as atomic orbitals, the expansion is called the <strong>Linear Combination of Atomic Orbitals (LCAO)</strong>. In practice, most basis functions are <strong>constructed functions</strong>, not pure atomic orbitals.</p><hr><h3 id="1-2-Slater-Type-Orbital-STO">1.2 Slater Type Orbital (STO)</h3><ul><li>Resembles the real atomic orbitals in terms of radial behavior.</li><li>Historically used in some quantum chemistry programs (e.g., ADF), but not common because integrals involving STOs are more difficult to evaluate.</li><li>STOs require fewer functions to achieve similar accuracy compared to GTOs.</li></ul><p>The general form of an STO is:</p><p>$$<br>\chi_{\zeta, l, m, n}^A(r, \theta, \phi) = N Y_{l,m}(\theta, \phi) , r^{n-1} e^{-\zeta r}<br>$$</p><p>where</p><ul><li>$r = |\mathbf{r} - \mathbf{R}_A|$: distance from electron to nucleus $A$</li><li>$Y_{l,m}(\theta,\phi)$: spherical harmonics</li><li>$N$: normalization constant</li></ul><hr><h3 id="1-3-Plane-Wave">1.3 Plane Wave</h3><ul><li>Suitable for <strong>periodic systems</strong> such as solids.</li><li>Basis functions take the form:</li></ul><p>$$<br>\chi_{\mathbf{k+G}}(\mathbf{r}) = \exp \left[ i (\mathbf{k} + \mathbf{G}) \cdot \mathbf{r} \right]<br>$$</p><ul><li>Requires the use of pseudopotentials to handle core electrons.</li><li>Consumes large computational resources, especially for molecules, making it less efficient for quantum chemistry.</li></ul><hr><h3 id="1-4-Gaussian-Type-Function-GTF-or-Gaussian-Type-Orbital-GTO">1.4 Gaussian Type Function (GTF) or Gaussian Type Orbital (GTO)</h3><ul><li>The most widely used basis functions in quantum chemistry.</li><li>Their Gaussian form makes it computationally efficient to evaluate electron integrals.</li></ul><p>The explicit form of a Gaussian type function is:</p><p>$$<br>\phi_{\alpha, l, m, n}^A(\mathbf{r})<br>= N , x^l , y^m , z^n , e^{-\alpha (\mathbf{r} - \mathbf{R}_A)^2}<br>$$</p><p>where the normalization constant $N$ is</p><p>$$<br>N = \left( \frac{2\alpha}{\pi} \right)^{3/4}<br>\sqrt{ \frac{(8\alpha)^{,l+m+n} , l! , m! , n!}{(2l)! , (2m)! , (2n)!} }<br>$$</p><ul><li>$\alpha$: Gaussian exponent</li><li>$\mathbf{R}_A$: coordinates of the nucleus $A$ to which this Gaussian belongs</li><li>$x, y, z$: Cartesian components of $\mathbf{r} - \mathbf{R}_A$</li><li>$l, m, n$: integers defining the type of GTF</li><li>$u = l + m + n$: corresponds to the angular momentum of the GTF</li></ul><hr><h4 id="Examples-of-GTF-Types">Examples of GTF Types</h4><table><thead><tr><th>$u$</th><th>Type</th><th>$l$</th><th>$m$</th><th>$n$</th></tr></thead><tbody><tr><td>0 (S)</td><td>S</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1 (P)</td><td>X</td><td>1</td><td>0</td><td>0</td></tr><tr><td>1 (P)</td><td>Y</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1 (P)</td><td>Z</td><td>0</td><td>0</td><td>1</td></tr><tr><td>2 (D)</td><td>XX</td><td>2</td><td>0</td><td>0</td></tr><tr><td>2 (D)</td><td>YY</td><td>0</td><td>2</td><td>0</td></tr><tr><td>2 (D)</td><td>ZZ</td><td>0</td><td>0</td><td>2</td></tr><tr><td>2 (D)</td><td>XY</td><td>1</td><td>1</td><td>0</td></tr><tr><td>2 (D)</td><td>XZ</td><td>1</td><td>0</td><td>1</td></tr><tr><td>2 (D)</td><td>YZ</td><td>0</td><td>1</td><td>1</td></tr><tr><td>3 (F)</td><td>XXX</td><td>3</td><td>0</td><td>0</td></tr><tr><td>3 (F)</td><td>YYY</td><td>0</td><td>3</td><td>0</td></tr><tr><td>3 (F)</td><td>ZZZ</td><td>0</td><td>0</td><td>3</td></tr><tr><td>3 (F)</td><td>XXY</td><td>2</td><td>1</td><td>0</td></tr><tr><td>3 (F)</td><td>XXZ</td><td>2</td><td>0</td><td>1</td></tr><tr><td>3 (F)</td><td>YYX</td><td>1</td><td>2</td><td>0</td></tr><tr><td>3 (F)</td><td>YYZ</td><td>0</td><td>2</td><td>1</td></tr><tr><td>3 (F)</td><td>ZZX</td><td>1</td><td>0</td><td>2</td></tr><tr><td>3 (F)</td><td>ZZY</td><td>0</td><td>1</td><td>2</td></tr><tr><td>3 (F)</td><td>XYZ</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>In practical quantum chemistry calculations, basis sets are almost always built from <strong>contracted Gaussian type functions (CGTOs)</strong>.<br>Each contracted function is formed as a linear combination of several <strong>primitive Gaussian type functions (PGTOs)</strong>:<br>$$<br>\chi(\mathbf{r}) = \sum_i d_i , \phi_i(\mathbf{r})<br>$$</p><p>Here, $\phi_i(\mathbf{r})$ represents a primitive GTF and $d_i$ is the contraction coefficient.<br>The number of primitives included in such a combination is referred to as the <strong>degree of contraction</strong>.</p><p>If a basis function is made from a single primitive GTF, it is called an <strong>uncontracted function</strong>.</p><hr><p>Both contracted and uncontracted functions are used in modern quantum chemistry.<br>If one only uses uncontracted GTFs, the number of primitives required for a reasonably accurate description becomes extremely large, making the computation prohibitively expensive.<br>By contracting several primitives into a single basis function, one can mimic the behavior of Slater type orbitals near the nucleus with relatively few functions, while still leaving flexibility to describe the chemically important valence region using additional (often less contracted) functions.</p><p>It is important to note that contraction coefficients are <strong>fixed</strong> once the basis set is defined. During the SCF procedure, these coefficients remain unchanged. What evolves through the SCF iterations are the <strong>molecular orbital expansion coefficients</strong>, which are optimized until convergence.</p><hr><h3 id="1-5-Shells">1.5 Shells</h3><p>In basis set terminology, a <strong>shell</strong> refers to a group of Gaussian type functions (GTFs) that share the same angular momentum but differ in their Cartesian form.<br>For Cartesian GTFs, the shell structures are:</p><ul><li><strong>S shell:</strong> S</li><li><strong>P shell:</strong> X, Y, Z</li><li><strong>D shell:</strong> XX, YY, ZZ, XY, XZ, YZ</li><li><strong>F shell:</strong> XXX, YYY, ZZZ, XXY, XXZ, YYX, YYZ, ZZX, ZZY, XYZ</li><li><strong>G shell:</strong> XXXX, YYYY, ZZZZ, XXXY, XXXZ, YYYX, YYYZ, ZZZX, ZZZY, XXYY, XXZZ, YYZZ, XXYZ, YYXZ, ZZXY</li></ul><p>…and so on for higher angular momenta.</p><hr><p>In practice, a contracted basis function is formed by contracting multiple primitive GTFs.<br>Thus, a basis set shell can also be constructed by contracting a set of <strong>primitive shells</strong>.</p><p>Within a given shell, all functions share the same contraction coefficients and Gaussian exponents.<br>Therefore, in real basis set definitions, shells are often specified as a unit rather than listing each function separately.</p><h2 id="II-Basis-Sets">II. Basis Sets</h2><p>There are many different types of basis sets, such as <strong>6-31G*</strong>, <strong>def2-TZVP</strong>, and <strong>cc-pVTZ</strong>.</p><p>Each basis set specifies, for every atom, the types of shells to be used, along with the contraction coefficients and Gaussian exponents. The parameters of a basis set can be determined in several ways. For example, one can fit Slater-type orbitals (STOs), or optimize against certain atomic or molecular properties such as ionization energies, electron affinities, or atomic excitation energies. Basis sets can also be constructed by using special schemes like <strong>even-tempered exponents</strong>.</p><p>Different basis sets vary in reliability, size, and computational cost. A well-designed basis set balances accuracy with efficiency: it should be large enough to provide good results, but not so large that the computation becomes prohibitively expensive. It is worth emphasizing that you cannot compare the energies in different basis sets.<br>For problems requiring high accuracy, one often needs to employ systematically improvable basis sets that converge toward the complete basis set limit.</p><h4 id="Example-Basis-Set-Definition-for-Carbon-in-Gaussian-Format">Example: Basis Set Definition for Carbon in Gaussian Format</h4><p>The table below shows how a basis set is defined for carbon in the Gaussian program format.</p><ul><li><strong>Shell type (S, P, …)</strong></li><li><strong>Contraction degree</strong> (number of primitive GTFs combined)</li><li><strong>GTF exponent</strong> (α values)</li><li><strong>Contraction coefficients</strong> (d values)</li></ul><p>Example:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">S</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">4464510</span>E+<span class="hljs-number">03</span> <span class="hljs-number">0</span>.<span class="hljs-number">197880</span>E-<span class="hljs-number">01</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">6746260</span>E+<span class="hljs-number">02</span> <span class="hljs-number">0</span>.<span class="hljs-number">145340</span>E+<span class="hljs-number">00</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">1506700</span>E+<span class="hljs-number">02</span> <span class="hljs-number">0</span>.<span class="hljs-number">185290</span>E+<span class="hljs-number">00</span><br><br><span class="hljs-attribute">S</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">6746260</span>E+<span class="hljs-number">02</span> -<span class="hljs-number">0</span>.<span class="hljs-number">999100</span>E-<span class="hljs-number">02</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">1506700</span>E+<span class="hljs-number">02</span> <span class="hljs-number">0</span>.<span class="hljs-number">285190</span>E+<span class="hljs-number">00</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">2999100</span>E+<span class="hljs-number">01</span> <span class="hljs-number">0</span>.<span class="hljs-number">566280</span>E+<span class="hljs-number">00</span><br><br><span class="hljs-attribute">S</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">2999100</span>E+<span class="hljs-number">01</span> <span class="hljs-number">1</span>.<span class="hljs-number">000000</span>E+<span class="hljs-number">00</span><br><br><span class="hljs-attribute">P</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">4367700</span>E+<span class="hljs-number">01</span> <span class="hljs-number">0</span>.<span class="hljs-number">116710</span>E+<span class="hljs-number">00</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">8698200</span>E+<span class="hljs-number">00</span> <span class="hljs-number">0</span>.<span class="hljs-number">475580</span>E+<span class="hljs-number">00</span><br><br><span class="hljs-attribute">P</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>.<span class="hljs-number">00</span><br><span class="hljs-attribute">0</span>.<span class="hljs-number">1883900</span>E+<span class="hljs-number">00</span> <span class="hljs-number">1</span>.<span class="hljs-number">000000</span>E+<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h3 id="2-1-Minimal-Basis-Set">2.1 Minimal Basis Set</h3><p>A <strong>minimal basis set</strong> assigns only <strong>one basis function</strong> to each atomic orbital (AO). This makes the basis very compact, but also too small to fully describe core and valence orbitals in real molecules. Therefore, minimal basis sets are rarely used in modern quantum chemistry. The most well-known minimal basis sets are the <strong>STO-nG</strong> series introduced by Pople. In these, each Slater-type orbital (STO) is approximated by a linear combination of <strong>n Gaussian type functions (GTFs)</strong>. The notation “nG” means that each STO is replaced by n Gaussians.</p><p>The most common example is <strong>STO-3G</strong>. STOs resemble real atomic orbitals, but integrals with STOs are difficult to compute. In contrast, integrals involving GTFs can be evaluated efficiently.  However, a single Gaussian does not reproduce the radial behavior of an STO very well, especially in the region close to the nucleus where the cusp is important. Therefore, a linear combination of several GTFs is used to approximate one STO. This is the principle behind the STO-nG minimal basis sets.</p><p>The figure below shows the radial behavior of a 1s STO compared to its Gaussian approximations:</p><ul><li><strong>SLATER:</strong> true Slater-type orbital</li><li><strong>STO-1G:</strong> single Gaussian approximation</li><li><strong>STO-2G:</strong> contraction of two Gaussians</li><li><strong>STO-3G:</strong> contraction of three Gaussians</li></ul><img src="D:\calculate\github\QchemTutorials\notebooks\03-qchem\pngs\STO.png" alt="STO" style="zoom:25%;" /><h3 id="2-2-Extended-Basis-Sets">2.2 Extended Basis Sets</h3><p>Compared with minimal basis sets, <strong>extended basis sets</strong> use more than one basis function to represent each atomic orbital.</p><p>If each valence orbital is described by <em>n</em> basis functions, the basis set is called an <strong>n-zeta basis set</strong>.<br>A widely used example is the <strong>Pople 6-31G series</strong>, which is a <strong>double-zeta (DZ) basis set</strong>.</p><hr><h4 id="Example-6-31G">Example: 6-31G</h4><ul><li>The <strong>core orbitals</strong> are represented by one contracted basis function formed from six primitive Gaussians.</li><li>Each <strong>valence orbital</strong> is described by two basis functions:<ul><li>One contracted function composed of three primitives.</li><li>One uncontracted single primitive.</li></ul></li></ul><p>Thus, 6-31G is a <strong>double-zeta (DZ)</strong> basis set.<br>An extended version, <strong>6-311G</strong>, uses one contracted function of three primitives plus two uncontracted functions for each valence orbital, making it a <strong>triple-zeta (TZ)</strong> basis set.</p><p>In the 6-31G and 6-311G families, the <strong>core orbitals</strong> are represented by a single contracted function.<br>The contraction degree is very high, but since core orbitals are relatively rigid, their shape and energy hardly change in molecules. Therefore, it is sufficient to describe them with a single contracted function. In contrast, <strong>valence orbitals</strong> are much more flexible. They change significantly during chemical bonding, and their shapes may be distorted in molecular environments. Thus, multiple basis functions are needed for valence orbitals. For example, in bonding and anti-bonding situations, splitting the valence description allows the basis set to capture such variations more accurately.</p><p>Minimal basis sets fail to capture the flexibility of valence orbitals, leading to poor accuracy. Extended basis sets, with split-valence functions, provide a much more reliable description of molecular electronic structure.</p><hr><h3 id="2-3-Polarization-Functions">2.3 Polarization Functions</h3><p><strong>Polarization functions</strong> are additional basis functions with angular momentum higher than that of the highest occupied atomic orbital.<br>For example:</p><ul><li>For hydrogen, $p$ functions are polarization functions.</li><li>For oxygen, $d$ functions are polarization functions.</li><li>For iron (Fe), $f$ functions are polarization functions.</li></ul><p>Polarization functions are usually <strong>uncontracted</strong>.</p><p>Adding polarization functions allows the basis set to describe distortions of atomic orbitals in molecular environments. This is essential for obtaining accurate molecular properties, especially for atoms that are important in bonding. In Hartree–Fock and correlated methods, polarization functions greatly improve the flexibility of the wavefunction. They allow the basis set to reproduce features such as <strong>bond polarization</strong> and <strong>cusp behavior</strong> near nuclei. Without polarization functions, calculations systematically underestimate bond dipoles and fail to capture angular distortions.</p><h3 id="2-4-Diffuse-Functions">2.4 Diffuse Functions</h3><p><strong>Diffuse functions</strong> are basis functions with very small exponents (close to zero).<br>They extend very far into space, and are usually uncontracted.</p><hr><h4 id="When-diffuse-functions-are-useful">When diffuse functions are useful</h4><ul><li>Calculation of <strong>dipole moments</strong> and <strong>higher multipole moments</strong></li><li>Description of <strong>anions</strong> and <strong>Rydberg excited states</strong></li><li>Calculation of <strong>vertical ionization energies</strong>, <strong>electron affinities</strong>, and <strong>excitation energies</strong></li><li>Description of <strong>weak intermolecular interactions</strong> (van der Waals, hydrogen bonding)</li><li>Calculation of <strong>Raman</strong> and <strong>ROA intensities</strong></li><li>More accurate <strong>reaction energies</strong> and potential energy surfaces</li></ul><hr><h4 id="When-diffuse-functions-may-not-help">When diffuse functions may not help</h4><ul><li>For systems with no strong polar character, diffuse functions do not necessarily improve results.</li><li>Adding diffuse functions increases computational cost and sometimes only brings marginal improvements.</li></ul><p>The <strong>3-zeta basis set</strong> family (e.g., triple-zeta) often already includes diffuse functions in its design.  The <strong>4-zeta basis set</strong> family almost always requires diffuse functions to be added explicitly.</p><hr><h4 id="Problems-Introduced-by-Diffuse-Functions">Problems Introduced by Diffuse Functions</h4><ul><li><strong>Significant increase in computational cost</strong></li><li>SCF convergence becomes much more difficult</li><li>Some wavefunction analysis methods may fail (e.g., <strong>Mayer bond order</strong>, <strong>Mulliken population analysis</strong>)</li><li>May <strong>destroy chemical interpretability</strong> of virtual orbitals (loss of clear valence character)</li><li>Sometimes produce <strong>unstable eigenvalues</strong> in calculations</li><li>Can lead to <strong>reduced symmetry</strong> in wavefunctions and molecular structures due to numerical issues</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Chemistry Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IQmol</title>
    <link href="/IQmol/"/>
    <url>/IQmol/</url>
    
    <content type="html"><![CDATA[<h1>IQmol</h1><p>IQmol is a GUI software for visualizing molecule, and manage calculation results from Q-Chem</p><p>you can download it here <a href="https://www.iqmol.org/">IQmol Molecular Viewer</a></p><h2 id="XYZ-Files">XYZ Files</h2><p>.xyz file is a widely used</p>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Chemistry Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHY 162a 1</title>
    <link href="/Phy%20162a%201/"/>
    <url>/Phy%20162a%201/</url>
    
    <content type="html"><![CDATA[<p>1.1<br>$$<br>L=\frac{1}{2}g_{\alpha\beta}(q)\dot {q}^\alpha\dot {q}^\beta<br>$$</p><p>$$<br>p &amp;= \sum_{\alpha} \frac{\partial L}{\partial \dot q^\alpha}<br>\<br>&amp;~~~~~~~~~~~~~~~=\frac{1}{2}g_{ij}(\delta_{\alpha}^{i}\dot q^{j}+\dot q^{i}\delta_{\alpha}^{j})<br>\<br>&amp;=g_{\alpha\beta}(q)\dot q^{\beta}<br>$$</p><p>$$<br>F &amp;= \frac{\partial L}{\partial q^{\alpha}}<br>\<br>&amp;=\frac{1}{2}\frac{\partial g_{ij}(q)}{\partial q^{\alpha}}\dot {q}^i\dot {q}^j<br>$$</p><p>1.2<br>$$<br>\frac{\partial L}{\partial q^{\alpha}} &amp;= \frac{d}{dt}\frac{\partial L}{\partial \dot q^\alpha }<br>\<br>\frac{1}{2}\frac{\partial g_{ij}(q)}{\partial q^{\alpha}}\dot {q}^i\dot {q}^j&amp;=\frac{d}{dt}(g_{\alpha\beta}(q)\dot q^{\beta})<br>\<br>\frac{1}{2}\frac{\partial g_{ij}}{\partial q^{\alpha}}\dot {q}^i\dot {q}^j&amp;=\frac{d}{dt}(g_{\alpha\beta})\dot q^{\beta}+g_{\alpha\beta}\ddot q^{\beta}<br>\<br>\frac{1}{2}\frac{\partial g_{ij}}{\partial q^{\beta}}\dot {q}^i\dot {q}^j&amp;=\frac{\partial (g_{\beta\alpha})}{\partial q^k}\dot q^{k}\dot q^{\alpha} +g_{\beta\alpha}\ddot q^{\alpha}<br>\<br>\frac{1}{2}g^{\alpha\rho}(\frac{\partial g_{\beta\gamma}}{\partial q^{\rho}}\dot {q}^{\beta}\dot {q}^\gamma - 2\frac{\partial g_{\gamma \rho}}{\partial q^\beta}\dot q^{\beta}\dot q^{\gamma})&amp;=\delta_{i}^{\alpha}\ddot q^{i}<br>\<br>\ddot q^{\alpha}+\frac{1}{2}g^{\alpha\rho}(-\frac{\partial g_{\beta\gamma}}{\partial q^{\rho}}\dot {q}^{\beta}\dot {q}^\gamma + \frac{\partial g_{\gamma \rho}}{\partial q^\beta}\dot q^{\beta}\dot q^{\gamma}+\frac{\partial g_{\beta \rho}}{\partial q^\gamma}\dot q^{\beta}\dot q^{\gamma})&amp;=0<br>\<br>Q.E.D<br>$$</p><p>2.1</p><p>$$<br>F_1 &amp;= -k(x_1-x_2-l)<br>\<br>F_2 &amp;= k(x_1-x_2-l)<br>\<br>U(x_1,x_2) &amp;= \frac{1}{2}k(x_1-x_2-l)^2<br>$$</p><p>$$<br>L=\frac{1}{2}m(\dot x_1^2+\dot x_2^2)-\frac{1}{2}k(x_1-x_2-l)^2<br>$$</p><p>2.2<br>$$<br>L=\frac{1}{4}m(4\dot X^2+\dot x^2)-\frac{1}{2}k(x-l)^2<br>$$<br>2.3<br>$$<br>\frac{\partial L}{\partial x_i} = F_i<br>$$</p><p>$$<br>\frac{d}{dt}\frac{\partial L}{\partial \dot x_i} = m\ddot x_i<br>$$</p><p>Euler-Lagrange equations:<br>$$<br>F_i=m\ddot x_i<br>\<br>0 = m(\ddot x_1+\ddot x_2)<br>\<br>-2k(x_1-x_2-l) = m(\ddot x_1-\ddot x_2)<br>$$<br>For $X$ and $x$:<br>$$<br>\frac{\partial L}{\partial X} = 0<br>\<br>\frac{\partial L}{\partial x} = -k(x-l)<br>\<br>\frac{d}{dt}\frac{\partial L}{\partial \dot X} = 2m\ddot X<br>\<br>\frac{d}{dt}\frac{\partial L}{\partial \dot x} = \frac{1}{2}m\ddot x<br>$$<br>Euler-Lagrange equations:<br>$$<br>-2m\ddot X = 0 \rightarrow  \ddot X = 0<br>\<br>-k(x-l)-\frac{1}{2}m\ddot x =0<br>\<br>Q.E.D<br>$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>PHY 162a Problem Sets</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Multiwfn</title>
    <link href="/Multiwfn/"/>
    <url>/Multiwfn/</url>
    
    <content type="html"><![CDATA[<h1>Multiwfn</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Chemistry Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
